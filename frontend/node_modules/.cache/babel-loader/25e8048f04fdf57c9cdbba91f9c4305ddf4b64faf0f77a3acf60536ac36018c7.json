{"ast":null,"code":"// api.js\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Универсальная функция для запросов\nasync function makeRequest(url, options = {}) {\n  try {\n    const response = await fetch(`${API_BASE_URL}${url}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Request failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error;\n  }\n}\n\n// Регистрация пользователя\nexport async function register(userData) {\n  const response = await fetch(`${API_BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    // Создаем ошибку с полным ответом\n    const error = new Error(data.error || 'Registration failed');\n    error.response = response;\n    error.data = data;\n    throw error;\n  }\n  return data;\n}\n\n// Авторизация пользователя\nexport async function login(credentials) {\n  return makeRequest('/login', {\n    method: 'POST',\n    body: JSON.stringify(credentials)\n  });\n}\n\n// Получение всех квизов\nexport async function getQuizzes() {\n  return makeRequest('/quizzes');\n}\n\n// Получение прогресса пользователя\nexport async function getProgress(userId) {\n  return makeRequest('/progress', {\n    headers: {\n      'user-id': userId\n    }\n  });\n}\n\n// Сохранение результата квиза\nexport async function saveQuizAttempt(userId, attemptData) {\n  return makeRequest('/quiz/attempt', {\n    method: 'POST',\n    headers: {\n      'user-id': userId\n    },\n    body: JSON.stringify(attemptData)\n  });\n}\n\n// Получение истории попыток\nexport async function getQuizHistory(userId, quizId = null) {\n  const params = new URLSearchParams();\n  if (quizId) params.append('quizId', quizId);\n  return makeRequest(`/quiz/history?${params}`, {\n    headers: {\n      'user-id': userId\n    }\n  });\n}\n\n// Создание демо-квиза (для тестирования)\nexport async function createDemoQuiz() {\n  return makeRequest('/quiz/create-demo', {\n    method: 'POST'\n  });\n}\n\n// Пример использования:\n/*\r\n// 1. Регистрация\r\nconst newUser = await register({\r\n    username: 'testuser',\r\n    password: 'password123',\r\n    email: 'test@mail.ru'\r\n});\r\n\r\n// 2. Логин\r\nconst user = await login({\r\n    username: 'testuser',\r\n    password: 'password123'\r\n});\r\n\r\n// 3. Получить квизы\r\nconst quizzes = await getQuizzes();\r\n\r\n// 4. Сохранить результат\r\nconst result = await saveQuizAttempt(user.userId, {\r\n    quizId: 1,\r\n    score: 3,\r\n    totalQuestions: 5,\r\n    answers: [\r\n        { questionIndex: 0, selectedAnswer: 1, isCorrect: true },\r\n        { questionIndex: 1, selectedAnswer: 2, isCorrect: false }\r\n    ],\r\n    timeSpent: 120\r\n});\r\n\r\n// 5. Получить прогресс\r\nconst progress = await getProgress(user.userId);\r\n\r\n// 6. Получить историю\r\nconst history = await getQuizHistory(user.userId);\r\n*/","map":{"version":3,"names":["API_BASE_URL","makeRequest","url","options","response","fetch","headers","data","json","ok","Error","error","console","register","userData","method","body","JSON","stringify","login","credentials","getQuizzes","getProgress","userId","saveQuizAttempt","attemptData","getQuizHistory","quizId","params","URLSearchParams","append","createDemoQuiz"],"sources":["C:/Users/is2ka/Desktop/Quiz/frontend/src/service/api.js"],"sourcesContent":["// api.js\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Универсальная функция для запросов\r\nasync function makeRequest(url, options = {}) {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}${url}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                ...options.headers\r\n            },\r\n            ...options\r\n        });\r\n\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(data.error || 'Request failed');\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('API request error:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Регистрация пользователя\r\nexport async function register(userData) {\r\n    const response = await fetch(`${API_BASE_URL}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData)\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n        // Создаем ошибку с полным ответом\r\n        const error = new Error(data.error || 'Registration failed');\r\n        error.response = response;\r\n        error.data = data;\r\n        throw error;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n// Авторизация пользователя\r\nexport async function login(credentials) {\r\n    return makeRequest('/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials)\r\n    });\r\n}\r\n\r\n// Получение всех квизов\r\nexport async function getQuizzes() {\r\n    return makeRequest('/quizzes');\r\n}\r\n\r\n// Получение прогресса пользователя\r\nexport async function getProgress(userId) {\r\n    return makeRequest('/progress', {\r\n        headers: {\r\n            'user-id': userId\r\n        }\r\n    });\r\n}\r\n\r\n// Сохранение результата квиза\r\nexport async function saveQuizAttempt(userId, attemptData) {\r\n    return makeRequest('/quiz/attempt', {\r\n        method: 'POST',\r\n        headers: {\r\n            'user-id': userId\r\n        },\r\n        body: JSON.stringify(attemptData)\r\n    });\r\n}\r\n\r\n// Получение истории попыток\r\nexport async function getQuizHistory(userId, quizId = null) {\r\n    const params = new URLSearchParams();\r\n    if (quizId) params.append('quizId', quizId);\r\n    \r\n    return makeRequest(`/quiz/history?${params}`, {\r\n        headers: {\r\n            'user-id': userId\r\n        }\r\n    });\r\n}\r\n\r\n// Создание демо-квиза (для тестирования)\r\nexport async function createDemoQuiz() {\r\n    return makeRequest('/quiz/create-demo', {\r\n        method: 'POST'\r\n    });\r\n}\r\n\r\n// Пример использования:\r\n/*\r\n// 1. Регистрация\r\nconst newUser = await register({\r\n    username: 'testuser',\r\n    password: 'password123',\r\n    email: 'test@mail.ru'\r\n});\r\n\r\n// 2. Логин\r\nconst user = await login({\r\n    username: 'testuser',\r\n    password: 'password123'\r\n});\r\n\r\n// 3. Получить квизы\r\nconst quizzes = await getQuizzes();\r\n\r\n// 4. Сохранить результат\r\nconst result = await saveQuizAttempt(user.userId, {\r\n    quizId: 1,\r\n    score: 3,\r\n    totalQuestions: 5,\r\n    answers: [\r\n        { questionIndex: 0, selectedAnswer: 1, isCorrect: true },\r\n        { questionIndex: 1, selectedAnswer: 2, isCorrect: false }\r\n    ],\r\n    timeSpent: 120\r\n});\r\n\r\n// 5. Получить прогресс\r\nconst progress = await getProgress(user.userId);\r\n\r\n// 6. Получить историю\r\nconst history = await getQuizHistory(user.userId);\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}